{"doc_id": "mlops-playbook", "section": "Model Registry & Versioning\n- Use semantic versioning (MAJOR.MINOR.PATCH) for models.\n- Store artifacts (model + preprocessing) with immutable digests.\n- Record training data snapshot and feature schema.", "text": "CI/CD for Models\n- Stages: lint → unit tests → data checks → train → evaluate → package → push → deploy.\n- Block promotion if performance or fairness gates fail.\n- Use environment‑specific configs (dev/stage/prod) and IaC for infra.", "source": "https://example.org/mlops_playbook"}
{"doc_id": "mlops-playbook", "section": "Deployment Strategies\n- Canary: route 5–10% traffic to the new version, monitor SLOs, then ramp.\n- Blue‑green: keep blue live, deploy green, switch when healthy.\n- Shadow: mirror traffic to candidate model without affecting users.", "text": "Monitoring & Observability\n- Track: latency (p50/p95), error rate, throughput, CPU/GPU/mem.\n- Model performance: accuracy/MAE, concept drift, data drift, feature skew.\n- Log prediction inputs/outputs with PII redaction.", "source": "https://example.org/mlops_playbook"}
{"doc_id": "kubernetes-ops-cheatsheet", "section": "Probes & Health\n- Liveness detects deadlocks; Readiness gates traffic; Startup for slow apps.\n- Example YAML snippet fields: `httpGet`, `initialDelaySeconds`, `periodSeconds`.", "text": "Rollouts\n- Use `maxSurge` and `maxUnavailable` to control rolling updates.\n- For canary, combine Deployment with Service + `% traffic` via Ingress/ServiceMesh.", "source": "https://example.org/kubernetes_ops_cheatsheet"}
{"doc_id": "kubernetes-ops-cheatsheet", "section": "Resources\n- Requests/limits per container; tune to avoid CPU throttling and OOMKills.", "text": "Debugging\n- `kubectl describe`, `kubectl logs -f`, `kubectl exec -it`.\n- Events often reveal scheduling and probe failures.", "source": "https://example.org/kubernetes_ops_cheatsheet"}
